<template>
<div style='width:100%;height:100%;background-color:#fff;position: relative'>
  <div class="statisticformbig" v-if='dataPermission && initPermission' v-loading="loading2" element-loading-text="首次加载较慢，请稍侯……" element-loading-background="rgba(0, 0, 0, 0.1)">
    <el-card>
      <div slot="header" class="clearfix"><span>及时率统计</span>
      <el-popover placement="bottom-start" width="1000" trigger="hover">
          <el-row>
            <el-col style="margin-left:20px" :span="22">
              <div v-for="(item,index) in title" :key="index">
              <span>{{item}}</span>
              <br/>
              </div>
            </el-col>
          </el-row>
          <el-button type="text" slot="reference" icon="el-icon-warning">口径说明</el-button>
        </el-popover>
      </div>
      <el-row>
        <el-form :model="form"  label-width="140px" ref="searchForm" :rules="formRule">
          <el-col :span="24">
            <el-col :span="12">
              <el-form-item label="分支行辖区：" prop="area">
                <!-- <treeselect :multiple="true" style="z-index:999;" v-if="citiesOptions.length>0" :options="citiesOptions" placeholder="请选择分支行辖区(必填)" v-model="form.area" /> -->
                <el-cascader style="width:100%" :options="citiesOptions" :props="props" collapse-tags v-model="form.area" clearable></el-cascader>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="落地日期：" prop="startEndData">
                <el-date-picker style="width:100% !important;" v-model="form.startEndData" type="daterange" value-format="yyyy-MM-dd" range-separator="至" start-placeholder="开始日期" end-placeholder="结束日期" :picker-options="pickerOptions1">
                </el-date-picker>
              </el-form-item>
            </el-col>
          </el-col>

          <div class="clearfix"></div>

          <el-col :span="12">
            <el-col :span="15">
              <el-form-item label="义务机构类型：" prop="levelType">
                <el-select v-model="form.levelType" clearable placeholder="请选择" @change="isTypeShow" @clear='clearOptions' style="width:100%;">
                  <el-option v-for="(item,index) in options" :key="index" :label="item.text" :value="item.value">
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="9">
              <el-form-item label="" label-width="0" prop="Cust">
                <el-select class='custOptions' multiple v-model="form.Cust" placeholder="请选择" @focus="getIndustry" @change='changeOptions' style="width:100%;" >
                  <el-option v-for="(item,index) in typeDate" :key="index" :label="item.text" :value="item.value" :disabled="item.disabled">
                  </el-option>
                </el-select>
              </el-form-item>
            </el-col>
          </el-col>

          <el-col :span="12">
            <el-form-item label="义务机构名称：" class="multiple_select" prop="str">
              <el-select style="width:100%;" v-model="form.str"  multiple filterable remote reserve-keyword placeholder="请输入关键词" :remote-method="remoteMethod" :loading="loading">
                  <el-option
                    v-for="item in rinmOptions"
                    :key="item.ricd"
                    :label="item.rinm"
                    :value="item.ricd">
                  </el-option>
                </el-select>
            </el-form-item>
          </el-col>
        </el-form>
      </el-row>
      
      <div class="btnalign">
        <el-button type="primary" @click="handleQury('searchForm')">统计</el-button>
        <el-button  @click="clearForm" type="primary" plain >清空</el-button>
      </div>

      <div style="margin-bottom:10px;">
        统计结果表：
        <el-button type="primary"  @click="exportStatistics" plain>导出全部</el-button>
        <el-button type="primary" @click="exportStaTwo" plain>导出已选</el-button>
        <el-button type="primary" @click="graphicalDisplay" style="margin-left:10px;">图形化展示</el-button>
      </div>
      <!-- 初始化统计结果 -->
      <el-table v-if="!initType" :empty-text="tableClue" :data="tabData">
        <el-table-column type="selection" width="55"></el-table-column>
        <el-table-column prop="index" label="序号" width="55"></el-table-column>
        <el-table-column prop="rinm" min-width="105" label="金融机构名称" ></el-table-column>
        <el-table-column prop="ricd" min-width="105" label="金融机构编码" ></el-table-column>
        <el-table-column prop="categoryName" min-width="100" label="行业名称" ></el-table-column>
        <el-table-column prop="hrepNum" min-width="90" label="大额报告份数" ></el-table-column>
        <el-table-column prop="hnum" min-width="105" label="大额交易笔数" ></el-table-column>
        <el-table-column prop="hontimeNum" min-width="105" label="大额交易按时报告笔数" ></el-table-column>
        <el-table-column prop="highPercent" min-width="105" label="大额交易上报及时率" ></el-table-column>
        <el-table-column prop="hcorNum" min-width="105" label="大额交易需补正笔数" ></el-table-column>
        <el-table-column prop="hcorOntimeNum" min-width="105" label="大额交易按时补正笔数" ></el-table-column>
        <el-table-column prop="hdelayNum" min-width="105" label="大额交易延时补正笔数" ></el-table-column>
        <el-table-column prop="highCorrectPercent" min-width="105" label="大额交易补正及时率" ></el-table-column>
        <el-table-column prop="snum" min-width="90" label="可疑交易报告份数" ></el-table-column>
        <el-table-column prop="scorNum" min-width="110" label="可疑交易报告需补正份数" ></el-table-column>
        <el-table-column prop="scorOntimeNum" min-width="110" label="可疑交易报告按时补正份数" ></el-table-column>
        <el-table-column prop="sdelayNum" min-width="110" label="可疑交易报告延时补正份数" ></el-table-column>
        <el-table-column prop="suspectCorrectPercent" min-width="105" label="可疑交易补正及时率" ></el-table-column>
      </el-table>
      <!-- 实际统计结果 -->
      <el-table v-if="initType" :data="tabData.length > 0 ? tabData.concat([sum]) : tabData" :empty-text="tableClue" @selection-change="handleSelectionChange" @sort-change="tabSortChange" v-loading="loadingTab" :element-loading-text="loadingStr" element-loading-background="rgba(0, 0, 0, 0.1)">
        <el-table-column type="selection" width="55"></el-table-column>
        <el-table-column prop="index" label="序号" width="55"></el-table-column>
        <el-table-column prop="rinm" min-width="105" label="金融机构名称" sortable="custom" >
          <template slot-scope="scope">
              <el-tooltip  effect="dark" placement="top-start">
                <div slot="content" style="margin:4px">{{scope.row.rinm}}</div>
                <span class="tableCell">{{scope.row.rinm}}</span>
              </el-tooltip>
          </template>
        </el-table-column>
        <el-table-column prop="ricd" min-width="105" label="金融机构编码" sortable="custom" >
          <template slot-scope="scope">
              <el-tooltip  effect="dark" placement="top-start">
                <div slot="content" style="margin:4px">{{scope.row.ricd}}</div>
                <span class="tableCell">{{scope.row.ricd}}</span>
              </el-tooltip>
          </template>
        </el-table-column>
        <el-table-column prop="categoryName" min-width="80" label="行业名称" sortable="custom" >
          <template slot-scope="scope">
              <el-tooltip  effect="dark" placement="top-start">
                <div slot="content" style="margin:4px">{{scope.row.categoryName}}</div>
                <span class="tableCell">{{scope.row.categoryName}}</span>
              </el-tooltip>
          </template>
        </el-table-column>
        <el-table-column prop="hrepNum" min-width="110" label="大额报告份数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.hrepNum===null">--</span>
            <span v-else>{{scope.row.hrepNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="hnum" min-width="110" label="大额交易笔数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.hnum===null">--</span>
            <span v-else>{{scope.row.hnum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="hontimeNum" min-width="95" label="大额交易按时报告笔数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.hontimeNum===null">--</span>
            <span v-else>{{scope.row.hontimeNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="highPercent" min-width="95" label="大额交易上报及时率" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.highPercent===null">--</span>
            <span v-else>{{scope.row.highPercent}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="hcorNum" min-width="95" label="大额交易需补正笔数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.hcorNum===null">--</span>
            <span v-else>{{scope.row.hcorNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="hcorOntimeNum" min-width="95" label="大额交易按时补正笔数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.hcorOntimeNum===null">--</span>
            <span v-else>{{scope.row.hcorOntimeNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="hdelayNum" min-width="95" label="大额交易延时补正笔数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.hdelayNum===null">--</span>
            <span v-else>{{scope.row.hdelayNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="highCorrectPercent" min-width="95" label="大额交易补正及时率" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.highCorrectPercent===null">--</span>
            <span v-else>{{scope.row.highCorrectPercent}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="snum" min-width="85" label="可疑交易报告份数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.snum===null">--</span>
            <span v-else>{{scope.row.snum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="scorNum" min-width="95" label="可疑交易报告需补正份数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.scorNum===null">--</span>
            <span v-else>{{scope.row.scorNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="scorOntimeNum" min-width="95" label="可疑交易报告按时补正份数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.scorOntimeNum===null">--</span>
            <span v-else>{{scope.row.scorOntimeNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="sdelayNum" min-width="95" label="可疑交易延时补正份数" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.sdelayNum===null">--</span>
            <span v-else>{{scope.row.sdelayNum}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="suspectCorrectPercent" min-width="95" label="可疑交易补正及时率" sortable="custom" >
          <template slot-scope="scope">
            <span v-if="scope.row.suspectCorrectPercent===null">--</span>
            <span v-else>{{scope.row.suspectCorrectPercent}}</span>
          </template>
        </el-table-column>
      </el-table>
       <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="pageInfo.pageNum" :page-sizes="[10, 20, 30, 40]" :page-size="pageInfo.pageSize" layout="total, sizes, prev, pager, next, jumper" :total="totals" background></el-pagination>
      
      <!-- <div v-if="!initType" style="width:100%;height:200px;"></div> -->
      <graphical :id="id" :dialogTableVisible="dialogTableVisible" :S_NAMES="'及时率统计 '"  :tablist="tabData" @setDialog="setDialog"></graphical>
    </el-card>
  </div>
  <div v-if='!dataPermission||!initPermission' style="height:656px;position: relative;">
    <div style="position: absolute;left: 50%; top: 50%; transform: translateX(-50%) translateY(-50%);text-align: center">
      <i v-if='!dataPermission' class="el-icon-warning" style="font-size:65px;color: #E6A23C;"></i>
      <p v-if='!dataPermission' style="height:40px;font-size:18px;letter-spacing: 2px" >您还未申请数据权限，请到"数据权限管理模块"申请!</p>
    </div>
  </div>
</div>
</template>

<script>
import { getToken } from '@/utils/auth'
import VeHistogram from 'v-charts/lib/histogram'
import Treeselect from '@riophae/vue-treeselect'
import { mapGetters } from 'vuex'
// import { getArea } from '@/api/common/citys'
import {
  getIndustryFrist,
  getIndustrySecond,
  endTimes,
  getPermission
} from '@/api/sys-monitoringAnalysis/statisticForm/large'
import {
  getRinmList1,
  administrativeDivision
} from '@/api/sys-monitoringAnalysis/statisticForm/subject'
import UploadExcelComponent from '@/components/UploadExcel/index.vue'
import { getStatistical, getSum } from '@/api/sys-monitoringAnalysis/statisticForm/obligationReport.js'
import graphical from '@/views/sys-monitoringAnalysis/statisticForm/antimoneyAuthority/graphical'
export default {
  components: {
    Treeselect,
    VeHistogram,
    UploadExcelComponent,
    graphical
  },
  data() {
    return {
      allValues: [],
      id: '5',
      dialogTableVisible: false,
      pickerOptions1: {
        disabledDate: (time) => {
          if (this.endTime !== '') {
            const d = new Date(this.endTime)
            return time.getTime() > d.getTime()
          } else {
            const d = new Date()
            return time.getTime() > d.getTime()
          }
        }
      },
      loadingTab: false,
      props: { multiple: true },
      loadingStr: '',
      tableClue: ' ',
      dataPermission: true,
      initPermission: false,
      endTime: '',
      typeDate: [],
      oldOptions: [],
      typeShow: false,
      loading: false,
      initType: false,
      loading2: false,
      citiesOptions: [], //   地区
      form: {
        orderBy: '',
        levelType: '',
        area: [],
        startEndData: [],
        statisticalTime: '',
        region: '',
        str: [],
        mechanismType: '',
        CustomerType: [],
        tsdr: '',
        ids: '',
        Cust: [],
        customerData: '',
        sort: '',
        improve: {
          ricds: '',
          startDate: '',
          endDate: ''
        }
      },
      exports: {
        ricds: '',
        startDate: '',
        endDate: '',
        industrys: '',
        areas: ''
      },
      rinmOptions: [],
      options: [],
      dataMec: [], //   交易发生地
      tabData: [],
      sum: '',
      multipleSelection: [], // 表格选择项
      totals: 0,
      pageInfo: {
        pageNum: 1,
        pageSize: 10
      },
      token: getToken(),
      title: [
        '分支行所统计的数据范围为：本分支行辖区的法人报告机构所报送的大额、可疑交易报告数据。',
        '大额计算通过一级校验，可疑计算通过二级校验',
        '1、大额报告份数：统计报告机构所报送的大额交易报告数量(report_ID)',
        '2、大额交易笔数：统计报告机构所报送的大额交易数量(trade_ID)',
        '3、大额交易按时报告笔数：迟报标识为1的交易笔数',
        '4、大额交易上报及时率：计算大额系统补正交易状态为因补正失效(按期trade_state=3)的数量/大额系统补正交易状态为因补正失效(按期trade_state=3)+因补正失效(延期trade_state=4)的数量',
        '5、可疑交易报告份数：统计报告机构所报送的可疑交易报告数量(xml_ID)',
        '6、可疑交易报告需补正份数：统计可疑报告状态为待补正(xml_state=2)的数量+状态为因补正失效(按期xml_state=3)的数量+状态为因补正失效(延期xml_state=4)的数量+状态为删除前待补正(延期xml_state=7)的数量',
        '7、可疑交易报告按时补正份数：统计可疑报告状态为因补正失效(按期xml_state=3)的数量',
        '8、可疑交易补正及时率：计算可疑报告系统补正状态为因补正失效(按期xml_state=3)的数量/可疑报告系统补正状态为因补正失效(按期xml_state=3)+因补正失效(延期xml_state=4)的数量'
      ],
      formRule: {
        area: [{ required: true, message: '请选择分支行辖区', trigger: 'change' }],
        startEndData: [{ required: true, message: '请选择统计时间', trigger: 'change' }],
        levelType: [{ required: true, message: '请选择义务机构类型', trigger: 'change' }]
        // Cust: [{ required: true, message: '请选择义务机构类型', trigger: 'change' }]
      }
    }
  },
  mounted() {
    this.getData()
    this.getPermission()
  },
  destroyed() {
    this.$message.closeAll()
  },
  computed: {
    ...mapGetters(['roles']),
    form_Cust: {
      get: function() {
        return this.form.Cust
      },
      set: function(val) {
        this.form.Cust = val
      }
    },
    form_area: {
      get: function() {
        return this.form.area
      },
      set: function(val) {
        this.form.area = val
      }
    }
  },
  methods: {
    setDialog(val) {
      this.dialogTableVisible = val
    },
    tabSortChange(column) {
      if (column.prop === 'hrepNum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '1'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '2'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'hnum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '3'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '4'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'hontimeNum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '5'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '6'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'highPercent') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '7'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '8'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'hcorNum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '9'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '10'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'hcorOntimeNum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '11'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '12'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'highCorrectPercent') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '13'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '14'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'snum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '15'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '16'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'scorNum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '17'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '18'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'scorOntimeNum') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '19'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '20'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'suspectCorrectPercent') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '21'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '22'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'suspectCorrectPercent') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '21'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '22'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'rinm') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '23'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '24'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'rinm') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '23'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '24'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'ricd') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '25'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '26'
          this.getStatisticalFn()
        }
      } else if (column.prop === 'categoryName') {
        if (column.order === 'ascending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '27'
          this.getStatisticalFn()
        }
        if (column.order === 'descending') {
          this.loadingStr = '排序中，请稍候……'
          this.loadingTab = true
          this.form.orderBy = '28'
          this.getStatisticalFn()
        }
      }
    },
    getIndustry() {
      if (this.form.levelType !== '') {
        var params = { type: this.form.levelType }
        getIndustrySecond(params)
          .then(res => {
            if (res.code === 200) {
              this.typeDate = res.data
              this.typeDate.unshift({ text: '所有选项', value: 'ALL_SELECT' })
              if (this.form.Cust.includes('ALL_SELECT')) {
                this.typeDate.map(item => {
                  if (item.value === 'ALL_SELECT') {
                    this.form.Cust = ['ALL_SELECT']
                    item.disabled = false
                  } else {
                    item.disabled = true
                  }
                })
              } else {
                this.typeDate.map(item => {
                  item.disabled = false
                })
              }
            }
          })
      } else {
        this.typeDate = []
        this.$message({
          type: 'success',
          showClose: true,
          duration: 6000,
          message: '请先选择义务机构类型'
        })
      }
    },
    isTypeShow() {
      if (this.form.levelType) {
        this.form.Cust = []
        this.typeDate = []
        getIndustrySecond({ type: this.form.levelType })
          .then(res => {
            if (res.code === 200) {
              this.typeDate = res.data
              this.typeDate.unshift({ text: '所有选项', value: 'ALL_SELECT' })
              // const arr = []
              // this.typeDate.forEach(res => {
              //   arr.push(res.value)
              // })
              // this.form.Cust = arr
            }
          })
      }
    },
    remoteMethod(query) {
      if ((this.form.Cust.length > 0 || this.form.levelType !== '') && this.form.area.length > 0) {
        if (query === '' || query.indexOf('[') !== -1 || query.indexOf(']') !== -1) {
          this.rinmOptions = []
        } else {
          this.loading = true
          setTimeout(() => {
            getRinmList1(this.form.Cust.join(',') || this.form.levelType, this.form.area.join(','), decodeURI(query))
              .then(res => {
                if (res.code === 200) {
                  this.loading = false
                  this.rinmOptions = res.data.filter(item => {
                    return item.rinm.toLowerCase()
                      .indexOf(query.toLowerCase()) > -1
                  })
                }
              })
              .catch()
          }, 200)
        }
      }
    },
    listSort(column, prop, order) {
      console.log(column, 1)
      console.log(prop, 2)
      console.log(order, 3)
    },
    graphicalDisplay() {
      if (this.tabData.length === 0) {
        this.$message({
          message: '无可展示数据',
          showClose: true,
          duration: 6000,
          type: 'warning'
        })
      } else {
        this.dialogTableVisible = true
      }
    },
    handleSelectionChange(val) {
      this.multipleSelection = val
    },
    getParamter() {
      const startDate = this.form.startEndData[0].split('-')
      if (startDate[1] < 10) {
        startDate[1] = '0' + Number(startDate[1])
      }
      if (startDate[2] < 10) {
        startDate[2] = '0' + Number(startDate[2])
      }
      this.form.startEndData[0] = startDate.join('-')
      const endDate = this.form.startEndData[1].split('-')
      if (endDate[1] < 10) {
        endDate[1] = '0' + Number(endDate[1])
      }
      if (endDate[2] < 10) {
        endDate[2] = '0' + Number(endDate[2])
      }
      this.form.startEndData[1] = endDate.join('-')
      // if (this.form.startEndData[0].split ) {
      //   this.form.startEndData[0] = this.form.startEndData[0].split('-').join('')
      //   this.form.startEndData[1] = this.form.startEndData[1].split('-').join('')
      // }
      const improve = {
        ricds: this.form.str.join(','),
        startDate: this.form.startEndData[0],
        endDate: this.form.startEndData[1],
        orderBy: this.form.orderBy
      }
      improve.areas = this.areaFormat(this.form.area)
      if (this.form.Cust.length === 0) {
        improve.industrys = this.form.levelType
      } else {
        if (this.form.Cust.includes('ALL_SELECT')) {
          improve.industrys = this.allValues
        } else {
          improve.industrys = this.form.Cust
        }
        improve.industrys = improve.industrys.join(',')
      }
      return improve
    },
    getParamterT() {
      const obj = Object.assign({}, this.pageInfo)
      const pageInfo = {
        pageNum: obj.pageNum,
        pageSize: obj.pageSize
      }
      return pageInfo
    },
    // 获取地区和机构类型
    getData() {
      endTimes('4').then(res => {
        if (res.code === 200) {
          this.endTime = res.data
          // if (this.endTime !== '') {
          //   const arr = this.endTime.split('-')
          //   var startTime = arr[0] + '-' + arr[1] + '-' + '01'
          //   this.form.startEndData = [startTime, this.endTime]
          // } else {
          //   this.form.startEndData = [new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + '01', new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate()]
          // }
        }
      })
      // getIndustry()
      //   .then(res => {
      //     if (res.code === 200) {
      //       this.options = res.data
      //     }
      //   })
      //   .catch(() => {})
      getIndustryFrist()
        .then(res => {
          if (res.code === 200) {
            this.options = res.data
            this.form.levelType = 'B'
            var params = { type: this.form.levelType }
            getIndustrySecond(params)
              .then(res => {
                if (res.code === 200) {
                  this.typeDate = res.data
                  this.typeDate.unshift({ text: '所有选项', value: 'ALL_SELECT' })
                  // const arr = []
                  // this.typeDate.forEach(res => {
                  //   arr.push(res.value)
                  // })
                  // this.form.Cust = arr
                }
              })
          }
        })
        .catch(() => {})

      administrativeDivision({ type: 'YWJGBGYBZJSLTJ' })
        .then(res => {
          if (res.code === 200) {
            this.citiesOptions = res.data
            const arr = []
            this.citiesOptions.forEach(res => {
              if (res.id) {
                res.value = res.id
                delete res.id
              }
              if (res.children) {
                for (let i = 0; i < res.children.length; i++) {
                  if (res.children[i].id) {
                    res.children[i].value = res.children[i].id
                    delete res.children[i].id
                  }
                  arr.push([res.value, res.children[i].value])
                }
              }
              if (!res.children) {
                arr.push([res.value])
              }
            })
            this.form.area = arr
          }
        })
        .catch()
    },
    areaFormat(area) {
      var areaArr = []
      var region = ''
      if (this.form.area.length > 0) {
        if (this.citiesOptions[0].children && area.length === this.citiesOptions[0].children.length) {
          areaArr.push('all')
        } else {
          area.forEach(res => {
            for (let i = 0; i < res.length; i++) {
              if (res[i] === 'all') {
                res.splice(i, 1)
              }
              areaArr.push(res[0])
            }
          })
        }
        region = areaArr.join(',')
      } else {
        region = ''
      }
      return region
    },
    getStatisticalFn() {
      this.exports = this.getParamter()
      this.tabData = []
      this.tableClue = ' '
      getStatistical(this.getParamter(), this.getParamterT()).then(res => {
        this.initType = false
        if (res) {
          if (res.code === 200) {
            this.loading2 = false
            this.loadingTab = false
            this.tabData = res.data.list
            if (this.tabData.length > 0) {
              this.initType = true
            } else {
              this.tableClue = '暂无数据'
              this.$alert('暂无数据', '提示', {
                confirmButtonText: '确定'
              })
            }
            for (var i = 0; i < this.tabData.length; i++) {
              this.tabData[i].index = i + 1
            }
            this.totals = res.data.total
          } else {
            this.$message({
              showClose: true,
              duration: 6000,
              message: res.message,
              type: 'error'
            })
            this.loading2 = false
            this.loadingTab = false
          }
        } else {
          this.$message({
            showClose: true,
            duration: 6000,
            message: '网络异常请稍候尝试请求',
            type: 'error'
          })
          this.loading2 = false
          this.loadingTab = false
        }
      })
        .catch(function(error) {
          this.loading2 = false
          this.loadingTab = false
          console.log(error)
        })
    },
    getSum() {
      this.sum = ''
      getSum(this.getParamter()).then(res => {
        if (res.code === 200) {
          this.sum = res.data
        }
      })
    },
    // 统计按钮
    handleQury(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          this.loading2 = true
          this.form.sort = ''
          this.form.orderBy = ''
          this.getStatisticalFn()
          this.getSum()
        } else {
          return false
        }
      })
    },
    // 批量导出
    exportStatistics() {
      if (this.tabData.length === 0) {
        this.$message({
          message: '无可导出数据',
          showClose: true,
          duration: 6000,
          type: 'warning'
        })
      } else {
        this.$confirm('此操作将导出此统计条件下的所有数据, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          location.href = '/monitor/count/correction/excel/?ricds=' +
          this.getParamter().ricds +
          '&startDate=' +
          this.getParamter().startDate +
          '&endDate=' +
          this.getParamter().endDate +
          '&industrys=' +
          this.getParamter().industrys +
          '&areas=' +
          this.getParamter().areas +
          '&orderBy=' +
          this.getParamter().orderBy +
          '&token=' +
          this.token
        }).catch()
      }
    },
    // 导出已选数据
    exportStaTwo() {
      if (this.multipleSelection.length === 0) {
        this.$message({
          message: '请至少选择一条数据',
          showClose: true,
          duration: 6000,
          type: 'warning'
        })
      } else {
        console.log(this.exports)
        const rowNums = []
        this.multipleSelection.forEach(el => {
          rowNums.push(el.rowNum)
        })
        location.href = '/monitor/count/correction/excel/?ricds=' +
          this.exports.ricds +
          '&startDate=' +
          this.exports.startDate +
          '&endDate=' +
          this.exports.endDate +
          '&industrys=' +
          this.exports.industrys +
          '&areas=' +
          this.exports.areas +
          '&rowNums=' +
          rowNums.join(',') +
          '&orderBy=' +
          this.exports.orderBy +
          '&token=' +
          this.token
      }
    },
    // 如果没有选地区 和 行业的时候 提醒
    // getDivision() {
    //   if (this.form.area.length === 0 && this.form.Cust.length !== 0) {
    //     this.$message({
    //       message: '请选择分支行辖区',
    //       type: 'success'
    //     })
    //   }
    //   if (this.form.Cust.length === 0 && this.form.area.length !== 0) {
    //     this.$message({
    //       message: '请选择机构类型',
    //       type: 'success'
    //     })
    //   }
    //   if (this.form.Cust.length === 0 && this.form.area.length === 0) {
    //     this.$message({
    //       message: '请选择分支行辖区和机构类型',
    //       type: 'success'
    //     })
    //   }
    // },
    // 查询条件清空
    clearForm() {
      this.tabData = []
      this.initType = false
      this.total = 0
      this.form.Cust = []
      this.str = []
      this.form.area = []
      this.form.startEndData = []
      this.form.levelType = ''
      this.typeShow = false
      // this.$refs.searchForm.resetFields()
      setTimeout(() => {
        this.$refs.searchForm.clearValidate()
      }, 0)
    },
    handleRegionChange(val) {
      console.log(val)
    },
    handleSizeChange(val) {
      this.pageInfo.pageSize = val
      this.exports.orderBy = this.form.orderBy
      this.loadingStr = '正在统计中，请稍候……'
      this.loadingTab = true
      getStatistical(this.exports, this.getParamterT()).then(res => {
        if (res) {
          if (res.code === 200) {
            this.loading2 = false
            this.loadingTab = false
            this.tabData = res.data.list
            for (var i = 0; i < this.tabData.length; i++) {
              this.tabData[i].index = i + 1
            }
            this.totals = res.data.total
          } else {
            this.$message({
              showClose: true,
              duration: 6000,
              message: res.message,
              type: 'error'
            })
            this.loading2 = false
            this.loadingTab = false
          }
        } else {
          this.$message({
            showClose: true,
            duration: 6000,
            message: '网络异常请稍候尝试请求',
            type: 'error'
          })
          this.loading2 = false
          this.loadingTab = false
        }
      })
    },
    handleCurrentChange(val) {
      this.pageInfo.pageNum = val
      this.exports.orderBy = this.form.orderBy
      this.loadingStr = '正在统计中，请稍候……'
      this.loadingTab = true
      getStatistical(this.exports, this.getParamterT()).then(res => {
        if (res) {
          if (res.code === 200) {
            this.loading2 = false
            this.loadingTab = false
            this.tabData = res.data.list
            for (var i = 0; i < this.tabData.length; i++) {
              this.tabData[i].index = i + 1
            }
            this.totals = res.data.total
          } else {
            this.$message({
              showClose: true,
              duration: 6000,
              message: res.message,
              type: 'error'
            })
            this.loading2 = false
            this.loadingTab = false
          }
        } else {
          this.$message({
            showClose: true,
            duration: 6000,
            message: '网络异常请稍候尝试请求',
            type: 'error'
          })
          this.loading2 = false
          this.loadingTab = false
        }
      })
    },
    changeOptions(val) {
      this.allValues = []
      // 保留所有值
      for (const item of this.typeDate) {
        this.allValues.push(item.value)
      }
      if (this.form.Cust.includes('ALL_SELECT')) {
        this.typeDate.map(item => {
          if (item.value === 'ALL_SELECT') {
            this.form.Cust = ['ALL_SELECT']
            item.disabled = false
          } else {
            item.disabled = true
          }
        })
      } else {
        this.typeDate.map(item => {
          item.disabled = false
        })
      }

      // 用来储存上一次的值，可以进行对比
      // const oldVal = this.oldOptions.length === 1 ? this.oldOptions[0] : []

      // 若是全部选择
      // if (val.includes('ALL_SELECT')) this.form.Cust = allValues

      // 取消全部选中 上次有 当前没有 表示取消全选
      // if (oldVal.includes('ALL_SELECT') && !val.includes('ALL_SELECT')) this.form.Cust = []

      // 点击非全部选中 需要排除全部选中 以及 当前点击的选项
      // 新老数据都有全部选中
      // if (oldVal.includes('ALL_SELECT') && val.includes('ALL_SELECT')) {
      //   const index = val.indexOf('ALL_SELECT')
      //   val.splice(index, 1) // 排除全选选项
      //   this.form.Cust = val
      // }

      // 全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选
      // if (!oldVal.includes('ALL_SELECT') && !val.includes('ALL_SELECT')) {
      //   if (val.length === allValues.length - 1) this.form.Cust = ['ALL_SELECT'].concat(val)
      // }

      // 储存当前最后的结果 作为下次的老数据
      // this.oldOptions[0] = this.form.Cust
    },
    clearOptions() {
      this.typeDate = []
      this.form.Cust = []
    },
    getPermission() {
      getPermission().then(res => {
        if (this.roles === 'branch' && !res.data.includes('YWJGBGYBZJSLTJ')) {
          this.dataPermission = false
        }
        this.initPermission = true
      })
    }
  },
  watch: {
    form_Cust: function(ol) {
      this.form.str = []
      this.rinmOptions = []
    },
    form_area: function(ol) {
      this.form.str = []
      this.rinmOptions = []
    }
  }
}
</script>

<style src="@riophae/vue-treeselect/dist/vue-treeselect.min.css"></style>
<style lang="scss">

.el-cascader-menu{
min-width: 270px !important;
}

.tableCell{
    text-align: left; 
    overflow:hidden; 
    white-space: nowrap; 
    text-overflow:ellipsis;
}

.statisticformbig {
  .multiple_select {
    .el-select {
      width: 100%;
    }
  }
  .title {
    margin-bottom: 10px;
    font-size: 14px;
    font-weight: bold;
  }
  .addtype {
    .el-form-item__label {
      padding-right: 0;
    }
  }
  .btnalign {
    text-align: right;
    margin-bottom: 15px;
  }
  .el-cascader__tags .el-tag > span{
    -webkit-box-flex:1;
    -ms-flex:none;
    flex:none;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .custOptions > div{
  word-break:normal;    
  display:block;
  white-space:pre-wrap;
  overflow:hidden;
  }
  .el-select__input.is-small{
    width: 100% !important;
  }
  .el-table thead tr th>.cell{
    white-space:normal !important;
  } 
}
</style>
